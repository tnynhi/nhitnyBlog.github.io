{"pageProps":{"data":{"Id":1007,"Title":"Javascript Concepts - Part2","Author":"Soumyajit","Tags":"Javascript Interview","Topic":"Javascript","Abstract":"Learning some of the fundamental concepts of Javascript and questions asked in javascript interview.","HeaderImage":"/BL-1006/header.png","isPublished":true},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    pre: \"pre\",\n    code: \"code\",\n    strong: \"strong\",\n    h3: \"h3\",\n    ul: \"ul\",\n    li: \"li\",\n    ol: \"ol\",\n    img: \"img\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"Explain-hoisting\",\n      children: \"Explain \\\"hoisting\\\"\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Hoisting is JavaScript's default behavior of moving all declarations to the top of the current scope.\\r\\nNote that the declaration is not actually moved - the JavaScript engine parses the declarations during compilation and becomes aware of declarations and their scopes.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"console.log(foo); // undefined\\r\\nvar foo = 1;\\r\\nconsole.log(foo); // 1\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Function declarations have the body hoisted while the function expressions only has the variable declaration hoisted.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// Function Declaration\\r\\nconsole.log(foo); // [Function: foo]\\r\\nfoo(); // 'FOOOOO'\\r\\nfunction foo() {\\r\\n  console.log('FOOOOO');\\r\\n}\\r\\nconsole.log(foo); // [Function: foo]\\r\\n\\r\\n// Function Expression\\r\\nconsole.log(bar); // undefined\\r\\nbar(); // Uncaught TypeError: bar is not a function\\r\\nvar bar = function () {\\r\\n  console.log('BARRRR');\\r\\n};\\r\\nconsole.log(bar); // [Function: bar]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Variables defined with let and const are hoisted to the top of the block, but not initialized.Meaning that the block of code is aware of the variable, but it cannot be used until it has been declared.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"What-is-a-closure\",\n      children: \"What is a closure\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"JavaScript implements a scoping mechanism named lexical scoping (or static scoping). Lexical scoping means that the accessibility of variables is determined by the position of the variables inside the nested scopes.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Simpler, the lexical scoping means that inside the inner scope you can access variables of outer scopes.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Closures are functions that have access to the outer (enclosing) function's variables scope even after the outer function has returned.\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"function outerFunc() {\\r\\n  let outerVar = 'I am outside!';\\r\\n  function innerFunc() {\\r\\n    console.log(outerVar); // => logs \\\"I am outside!\\\"\\r\\n  }\\r\\n  return innerFunc;\\r\\n}\\r\\nfunction exec() {\\r\\n  const myInnerFunc = outerFunc();\\r\\n  myInnerFunc();\\r\\n}\\r\\nexec();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Now innerFunc() is executed outside of its lexical scope, but exactly in the scope of exec() function. And what's important:\\r\\ninnerFunc() still has access to outerVar from its lexical scope, even being executed outside of its lexical scope.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"JavaScript-Rest-vs-Spread-Operator\",\n      children: \"JavaScript Rest vs Spread Operator\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Rest-Operator\",\n      children: \"Rest Operator\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"The rest operator (...) is used to put the rest of some specific user-supplied values into a JavaScript array.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For instance, consider this code that uses rest to enclose some values into an array:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// Use rest to enclose the rest of specific user-supplied values into an array:\\r\\nfunction myBio(firstName, lastName, ...otherInfo) {\\r\\n  return otherInfo;\\r\\n}\\r\\n\\r\\n// Invoke myBio function while passing five arguments to its parameters:\\r\\nmyBio(\\\"Oluwatobi\\\", \\\"Sofela\\\", \\\"CodeSweetly\\\", \\\"Web Developer\\\", \\\"Male\\\");\\r\\n\\r\\n// The invocation above will return:\\r\\n[\\\"CodeSweetly\\\", \\\"Web Developer\\\", \\\"Male\\\"]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Spread-Operator\",\n      children: \"Spread Operator\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.strong, {\n        children: \"The spread operator (...) helps you expand iterables into individual elements.\"\n      }), \"\\r\\nA spread operator is effective only when used within array literals, function calls, or initialized properties objects.\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Example-1-How-Spread-Works-in-an-Array-Literal\",\n      children: \"Example 1: How Spread Works in an Array Literal\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const myName = [\\\"Sofela\\\", \\\"is\\\", \\\"my\\\"];\\r\\nconst aboutMe = [\\\"Oluwatobi\\\", ...myName, \\\"name.\\\"];\\r\\n\\r\\nconsole.log(aboutMe);\\r\\n\\r\\n// The invocation above will return:\\r\\n[ \\\"Oluwatobi\\\", \\\"Sofela\\\", \\\"is\\\", \\\"my\\\", \\\"name.\\\" ]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Suppose we did not use the spread syntax to duplicate myName’s content. For instance, if we had written const aboutMe = [\\\"Oluwatobi\\\", myName, \\\"name.\\\"]. In such a case, the computer would have assigned a reference back to myName\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Example-2-How-to-Use-Spread-to-Convert-a-String-into-Individual-Array-Items\",\n      children: \"Example 2: How to Use Spread to Convert a String into Individual Array Items\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const myName = \\\"Oluwatobi Sofela\\\";\\r\\n\\r\\nconsole.log([...myName]);\\r\\n\\r\\n// The invocation above will return:\\r\\n[ \\\"O\\\", \\\"l\\\", \\\"u\\\", \\\"w\\\", \\\"a\\\", \\\"t\\\", \\\"o\\\", \\\"b\\\", \\\"i\\\", \\\" \\\", \\\"S\\\", \\\"o\\\", \\\"f\\\", \\\"e\\\", \\\"l\\\", \\\"a\\\" ]\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Example-3-How-the-Spread-Operator-Works-in-a-Function-Call\",\n      children: \"Example 3: How the Spread Operator Works in a Function Call\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const numbers = [1, 3, 5, 7];\\r\\n\\r\\nfunction addNumbers(a, b, c, d) {\\r\\n  return a + b + c + d;\\r\\n}\\r\\n\\r\\nconsole.log(addNumbers(...numbers));\\r\\n\\r\\n// The invocation above will return:\\r\\n16\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Suppose the numbers array had more than four items. In such a case, the computer will only use the first four items as addNumbers() argument and ignore the rest.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const numbers = [1, 3, 5, 7, 10, 200, 90, 59];\\r\\n\\r\\nfunction addNumbers(a, b, c, d) {\\r\\n  return a + b + c + d;\\r\\n}\\r\\n\\r\\nconsole.log(addNumbers(...numbers));\\r\\n\\r\\n// The invocation above will return:\\r\\n16\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Example-4-How-Spread-Works-in-an-Object-Literal\",\n      children: \"Example 4: How Spread Works in an Object Literal\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const myNames = [\\\"Oluwatobi\\\", \\\"Sofela\\\"];\\r\\nconst bio = { ...myNames, runs: \\\"codesweetly.com\\\" };\\r\\n\\r\\nconsole.log(bio);\\r\\n\\r\\n// The invocation above will return:\\r\\n\\r\\n{ 0: \\\"Oluwatobi\\\", 1: \\\"Sofela\\\", runs: \\\"codesweetly.com\\\" }\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Spread operators can’t expand object literal’s values\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Since a properties object is not an iterable object, you cannot use the spread operator to expand its values.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"However, you can use the spread operator to clone properties from one object into another.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const myName = { firstName: \\\"Oluwatobi\\\", lastName: \\\"Sofela\\\" };\\r\\nconst bio = { ...myName, website: \\\"codesweetly.com\\\" };\\r\\n\\r\\nconsole.log(bio);\\r\\n\\r\\n// The invocation above will return:\\r\\n{ firstName: \\\"Oluwatobi\\\", lastName: \\\"Sofela\\\", website: \\\"codesweetly.com\\\" };\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Pure-vs-Impure-Functions-in-JavaScript\",\n      children: \"Pure vs Impure Functions in JavaScript\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Pure Functions:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"They must be predictable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"They must have no side effects\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Identical inputs will always return identical outputs, no matter how many times a pure function is called.\"\n    }), \"\\n\", _jsxs(_components.ol, {\n      start: \"2\",\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Impure Function:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Unpredictable\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Has side-effects\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Side Effects can be:-\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Modifying a global variable\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Modifying an argument\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"External dependency (APIs, outer variables)\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"DOM manipulation\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Reading/writing files\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"//IMPURE FUNCTION\\r\\nconst impureAddToArray = (arr1, num) => {\\r\\n  //altering arr1 in-place by pushing\\r\\n  arr1.push(num);\\r\\n  return arr1;\\r\\n};\\r\\n\\r\\n// PURE FUNCTION\\r\\n// Adding a value to an array via a pure function instead can be achieved using the spread operator, which makes a copy of the original array without mutating it.\\r\\n\\r\\nconst pureAddToArray = (arr1, num) => {\\r\\n  return [...arr1, num];\\r\\n};\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// IMPURE FUNCTION\\r\\nconst impureAddToObj = (obj, key, val) => {\\r\\n  obj[key] = val;\\r\\n  return obj;\\r\\n};\\r\\n\\r\\nBecause we're modifying the object in-place, the above approach is considered impure. Below is its pure counterpart, utilising the spread operator again.\\r\\n\\r\\n// PURE FUNCTION\\r\\nconst  pureAddToObj = (obj, key, val) => {\\r\\n  return { ...obj, [key]: val };\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Higher-Order-Functions\",\n      children: \"Higher Order Functions\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A higher order function is a function that takes a function as an argument, or returns a function.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Some examples of higher order functions are .map() , .filter() and .reduce(). Both of them take a function as an argument.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Map-Method\",\n      children: \"Map Method\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using map method in javaScript creates an array by calling a specific function on each element present in the parent array.It returns a new array and elements of arrays are result of callback function.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Syntax:\\r\\narr.map(function(element, index, array){  }, this);\\r\\nThe this argument will be used inside the callback function. By default, its value is undefined .\\n\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Example:\\r\\nlet arr = [2, 3, 5, 7]\\r\\n\\r\\narr.map(function(element, index, array){\\r\\n\\tconsole.log(this) // 80\\r\\n}, 80);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Filter-Method\",\n      children: \"Filter Method\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The filter() method takes in a callback function and calls that function for every item it iterates over inside the target array. It entails filtering out one or more items (a subset) from a larger collection of items (a superset) based on some condition/preference.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Syntax:\\r\\narr.filter(function(element, index, array){  }, this);\\r\\nThe this argument will be used inside the callback function. By default, its value is undefined .\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Example: Filter items out of an array\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"let people = [\\r\\n    {name: \\\"aaron\\\",age: 65},\\r\\n    {name: \\\"beth\\\",age: 2},\\r\\n    {name: \\\"cara\\\",age: 13},\\r\\n    {name: \\\"daniel\\\",age: 3},\\r\\n    {name: \\\"ella\\\",age: 25},\\r\\n    {name: \\\"fin\\\",age: 1},\\r\\n    {name: \\\"george\\\",age: 43},\\r\\n]\\r\\n\\r\\nlet toddlers = people.filter(person => person.age <= 3)\\r\\n\\r\\nconsole.log(toddlers)\\r\\n\\r\\n/*\\r\\n[{\\r\\n  age: 2,\\r\\n  name: \\\"beth\\\"\\r\\n}, {\\r\\n  age: 3,\\r\\n  name: \\\"daniel\\\"\\r\\n}, {\\r\\n  age: 1,\\r\\n  name: \\\"fin\\\"\\r\\n}]\\r\\n*/\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Example: How to access the context object with this\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"let people = [\\r\\n    {name: \\\"aaron\\\", age: 65},\\r\\n    {name: \\\"beth\\\", age: 15},\\r\\n    {name: \\\"cara\\\", age: 13},\\r\\n    {name: \\\"daniel\\\", age: 3},\\r\\n    {name: \\\"ella\\\", age: 25},\\r\\n    {name: \\\"fin\\\", age: 16},\\r\\n    {name: \\\"george\\\", age: 18},\\r\\n]\\r\\n\\r\\nlet range = {\\r\\n  lower: 13,\\r\\n  upper: 16\\r\\n}\\r\\n\\r\\n\\r\\nlet teenagers = people.filter(function(person) {\\r\\n\\treturn person.age >= this.lower && person.age <= this.upper;\\r\\n}, range)\\r\\n\\r\\nconsole.log(teenagers)\\r\\n\\r\\n/*\\r\\n[{\\r\\n  age: 15,\\r\\n  name: \\\"beth\\\"\\r\\n}, {\\r\\n  age: 13,\\r\\n  name: \\\"cara\\\"\\r\\n}, {\\r\\n  age: 16,\\r\\n  name: \\\"fin\\\"\\r\\n}]\\r\\n*/\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Reduce-Method\",\n      children: \"Reduce Method\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Syntax\\r\\narray.reduce(function(total, currentValue, currentIndex, arr), initialValue)\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Array.reduce takes two parameters.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"The reducer\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"An initial value (optional)\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"The reducer is the function doing all the work. As reduce loops over your list, it feeds two parameters to your reducer.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"An accumulator\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Accumulator is the eventual return value\\r\\nWhen you're looping through the users, how are you keeping track of their total age? You need some counter variable to hold it. That's the accumulator\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"The current value\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The current value is just like when you use array[i] in a regular loop.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Example:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"var euros = [29.76, 41.85, 46.5];\\r\\n\\r\\nvar sum = euros.reduce( function(total, amount){\\r\\n  return total + amount\\r\\n}, 0);\\r\\n\\r\\nsum // 118.11\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Using-call-apply-and-bind\",\n      children: \"Using call(), apply() and bind()\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can have objects that have their own properties and methods.\\r\\nBut object1 cannot use the methods of object2 and vice versa.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1007/cab.png\",\n        alt: \"CAB\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"We can use call(), apply(), and bind() methods to tie a function into an object and call the function as if it belonged to that object.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Call-Method-in-JavaScript\",\n      children: \"Call() Method in JavaScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The call() method invokes a function with a specified context.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"var obj = { firstName: \\\"a\\\", lastName:\\\"b\\\" };\\r\\n\\r\\nfunction fullName(){\\r\\n  return this.firstName + this.lastName;\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"use the call() method to tie the function add() to the object obj:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"add.call(obj, 3);\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Use Call() with Multiple Arguments\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"function fullName(a, b){\\r\\n  return this.firstName + this.lastName + a + b;\\r\\n}\\r\\n\\r\\nconsole.log(add.call(obj, \\\"x\\\", \\\"y\\\"));\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Apply-Method-in-JavaScript\",\n      children: \"Apply() Method in JavaScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The apply() method does the exact same as call(). The difference is that call() accepts an argument list, but apply() accepts an array of arguments.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"var obj = { firstName: \\\"a\\\", lastName:\\\"b\\\" };\\r\\n\\r\\nfunction fullName(){\\r\\n  return this.firstName + this.lastName;\\r\\n}\\r\\n\\r\\nconsole.log(add.apply(obj, [\\\"x\\\", \\\"y\\\"]));\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Bind-Method-in-JavaScript\",\n      children: \"Bind() Method in JavaScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"call() and apply() methods are executed immediately when called (and returned a value).\\r\\nBut instead of executing a function immediately, bind() returns a copy of a function that can be executed later on.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"var obj = { num: 2 };\\r\\n\\r\\nfunction add(a, b){\\r\\n  return this.num + a + b;\\r\\n}\\r\\n\\r\\nconst func = add.bind(obj, 3, 5);\\r\\nfunc(); // Returns 10\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Async-and-Defer\",\n      children: \"Async and Defer\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Without using async and defer\\r\\nThe parsing is paused until the script is fetched, and executed. Once this is done, parsing resumes.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1007/without-defer-async-head.png\",\n        alt: \"Async-Defer\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Page loading a script with async\\r\\nThe script is fetched asynchronously, and when it’s ready the HTML parsing is paused to execute the script, then it’s resumed.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1007/with-async.png\",\n        alt: \"Async\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Page loading With defer\\r\\nThe script is fetched asynchronously, and it’s executed only after the HTML parsing is done.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1007/with-defer.png\",\n        alt: \"Defer\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Event-Throtting-and-debouncing\",\n      children: \"Event Throtting and debouncing\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Debouncing and Throttling techniques enhance the performance of your website, also prevent unnecessary API calls and load on the server.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Debouncing and throttling techniques are used to limit the number of times a function can execute.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Throttling\",\n      children: \"Throttling\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Throttling is a technique in which, no matter how many times the user fires the event, the attached function will be executed only once in a given time interval.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"let timer;\\r\\n\\r\\nconst handleInput = (val, delay) => {\\r\\n  if (timer) {\\r\\n    return;\\r\\n  }\\r\\n\\r\\n  timer = setTimeout(() => {\\r\\n    console.log(val);\\r\\n    timer = undefined;\\r\\n  }, delay);\\r\\n};\\r\\n\\r\\ndocument.getElementById(\\\"search-box\\\").addEventListener(\\\"keypress\\\", (e) => {\\r\\n  handleInput(e.target.value, 1000);\\r\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Debouncing\",\n      children: \"Debouncing\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In the debouncing technique, no matter how many times the user fires the event, the attached function will be executed only after the specified time once the user stops firing the event.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"let timer;\\r\\n\\r\\nconst handleInput = (val, delay) => {\\r\\n  clearTimeout(timer);\\r\\n\\r\\n  timer = setTimeout(() => {\\r\\n    console.log(val);\\r\\n  }, delay);\\r\\n};\\r\\n\\r\\ndocument.getElementById(\\\"search-box\\\").addEventListener(\\\"keypress\\\", (e) => {\\r\\n  handleInput(e.target.value, 1000);\\r\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Event-Bubbling-and-Capturing\",\n      children: \"Event Bubbling and Capturing\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1007/eventflow.svg\",\n        alt: \"eventflow\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Event-Bubbling\",\n      children: \"Event Bubbling\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"When an event happens on an element, it first runs the handlers on it, then on its parent, then all the way up on other ancestors.\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Let’s say we have 3 nested elements FORM > DIV > P with a handler on each of them\\r\\n\\r\\n<form onclick=\\\"alert('form')\\\">FORM\\r\\n  <div onclick=\\\"alert('div')\\\">DIV\\r\\n    <p onclick=\\\"alert('p')\\\">P</p>\\r\\n  </div>\\r\\n</form>\\r\\n\\r\\nA click on the inner <p> first runs onclick:\\r\\n\\r\\nOn that <p>.\\r\\nThen on the outer <div>.\\r\\nThen on the outer <form>.\\r\\nAnd so on upwards till the document object.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1007/event-order-bubbling.svg\",\n        alt: \"event-order-bubbling\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Event-Capturing\",\n      children: \"Event Capturing\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"In event capturing, an event propagates from the outermost element to the target element.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1007/capture.svg\",\n        alt: \"event-order-capture\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Clicking on the p element calls the click event handlers of all parent elements, starting from the outer and propagating inside to the target element p:\\r\\nhtml → body → article → div → p.\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Stopping-bubbling\",\n      children: \"Stopping bubbling\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"event.stopPropagation()\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"event.stopPropagation() stops the move upwards, but on the current element all other handlers will run.\"\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"Id":1007,"Title":"Javascript Concepts - Part2","Author":"Soumyajit","Tags":"Javascript Interview","Topic":"Javascript","Abstract":"Learning some of the fundamental concepts of Javascript and questions asked in javascript interview.","HeaderImage":"/BL-1006/header.png","isPublished":true}},"id":"javascript-concepts---part2","headings":[{"text":"Explain \"hoisting\"","level":2,"id":"Explain-hoisting","uid":1001},{"text":"What is a closure","level":2,"id":"What-is-a-closure","uid":1002},{"text":"JavaScript Rest vs Spread Operator","level":2,"id":"JavaScript-Rest-vs-Spread-Operator","uid":1003},{"text":"Rest Operator","level":3,"id":"Rest-Operator","uid":1004},{"text":"Spread Operator","level":3,"id":"Spread-Operator","uid":1005},{"text":"Example 1: How Spread Works in an Array Literal","level":3,"id":"Example-1-How-Spread-Works-in-an-Array-Literal","uid":1006},{"text":"Example 2: How to Use Spread to Convert a String into Individual Array Items","level":3,"id":"Example-2-How-to-Use-Spread-to-Convert-a-String-into-Individual-Array-Items","uid":1007},{"text":"Example 3: How the Spread Operator Works in a Function Call","level":3,"id":"Example-3-How-the-Spread-Operator-Works-in-a-Function-Call","uid":1008},{"text":"Example 4: How Spread Works in an Object Literal","level":3,"id":"Example-4-How-Spread-Works-in-an-Object-Literal","uid":1009},{"text":"Pure vs Impure Functions in JavaScript","level":2,"id":"Pure-vs-Impure-Functions-in-JavaScript","uid":1010},{"text":"Higher Order Functions","level":2,"id":"Higher-Order-Functions","uid":1011},{"text":"Map Method","level":3,"id":"Map-Method","uid":1012},{"text":"Filter Method","level":3,"id":"Filter-Method","uid":1013},{"text":"Reduce Method","level":3,"id":"Reduce-Method","uid":1014},{"text":"Using call(), apply() and bind()","level":2,"id":"Using-call-apply-and-bind","uid":1015},{"text":"Call() Method in JavaScript","level":3,"id":"Call-Method-in-JavaScript","uid":1016},{"text":"Apply() Method in JavaScript","level":3,"id":"Apply-Method-in-JavaScript","uid":1017},{"text":"Bind() Method in JavaScript","level":3,"id":"Bind-Method-in-JavaScript","uid":1018},{"text":"Async and Defer","level":2,"id":"Async-and-Defer","uid":1019},{"text":"Event Throtting and debouncing","level":2,"id":"Event-Throtting-and-debouncing","uid":1020},{"text":"Throttling","level":3,"id":"Throttling","uid":1021},{"text":"Debouncing","level":3,"id":"Debouncing","uid":1022},{"text":"Event Bubbling and Capturing","level":2,"id":"Event-Bubbling-and-Capturing","uid":1023},{"text":"Event Bubbling","level":3,"id":"Event-Bubbling","uid":1024},{"text":"Event Capturing","level":3,"id":"Event-Capturing","uid":1025},{"text":"Stopping bubbling","level":3,"id":"Stopping-bubbling","uid":1026}],"topics":["Git","React","Javascript"]},"__N_SSG":true}