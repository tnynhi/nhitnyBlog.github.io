{"pageProps":{"data":{"Id":1003,"Title":"Core Concept You Need to Know About React","Author":"Soumyajit","Tags":"React Interview","Topic":"React","Abstract":"Learning some of the fundamental concepts of React.js and top questions asked in react interview.","HeaderImage":"/BL-1003/reactjs.png","isPublished":true},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    strong: \"strong\",\n    em: \"em\",\n    code: \"code\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    img: \"img\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"Why-use-react.js\",\n      children: \"Why use react.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.em, {\n          children: \"1.Reusable Components:\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React provides a component based structure.Each tiny elements like button, checkbox, dropdown etc can be a component and the we create wrapper components composed of those smaller components.Each component decides how it should be rendered. Each component has its own internal logic.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.em, {\n          children: \"2.Fast render with Virtual DOM\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React uses virtual DOM to render the view.virtual DOM is a virtual representation of the real DOM. Each time the data changes in a react app, a new virtual DOM gets created. Creating a virtual DOM is much faster than rendering the UI inside the browser. Therefore, with the use of virtual DOM, the efficiency of the app improves.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: _jsx(_components.em, {\n          children: \"3.SEO friendly\"\n        })\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React allows developers to develop user interfaces that can be easily navigated in various search engines. It also allows server-side rendering, which boosts the SEO of an app.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"What-is-JSX\",\n      children: \"What is JSX?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"JSX stands for JavaScript XML.\\nIt allows us to write HTML inside JavaScript and place them in the DOM without using functions like \", _jsx(_components.code, {\n        children: \"appendChild( )\"\n      }), \" or \", _jsx(_components.code, {\n        children: \"createElement( )\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Without using JSX, we would have to create an element by the following process:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const text = React.createElement('p', {}, 'This is a text');\\nconst container = React.createElement('div','{}',text );\\nReactDOM.render(container,document.getElementById('app'));\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Using JSX, the above code can be simplified:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const container = (\\n\\n <div>\\n   <p>This is a text</p>\\n </div>\\n);\\nReactDOM.render(container,document.getElementById('app'));```\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As one can see in the code above, we are directly using HTML inside JavaScript*\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"What-is-the-virtual-DOM-How-does-react-use-the-virtual-DOM-to-render-the-UI\",\n      children: \"What is the virtual DOM? How does react use the virtual DOM to render the UI?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"DOM stands for 'Document Object Model'. In simple terms, it is a structured representation of the HTML elements that are present in a webpage or web-app. DOM represents the entire UI of your application\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Virtual DOM is a concept where a virtual representation of the real DOM is kept inside the memory and is synced with the real DOM by a library such as ReactDOM.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1003/vdom.png\",\n        alt: \"Virtual Dom\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Why was virtual DOM introduced?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"DOM manipulation is an integral part of any web application, but DOM manipulation is quite slow when compared to other operations in JavaScript.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The efficiency of the application gets affected when several DOM manipulations are being done. Most JavaScript frameworks update the entire DOM even when a small part of the DOM changes.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For example, consider a list that is being rendered inside the DOM. If one of the items in the list changes, the entire list gets rendered again instead of just rendering the item that was changed/updated. This is called inefficient updating.\\nTo address the problem of inefficient updating, the react team introduced the concept of virtual DOM.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"How does it work?\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1003/real-virtual.png\",\n        alt: \"Virtual Dom\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"For every DOM object, there is a corresponding virtual DOM object(copy), which has the same properties.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The main difference between the real DOM object and the virtual DOM object is that any changes in the virtual DOM object will not reflect on the screen directly. Consider a virtual DOM object as a blueprint of the real DOM object.\\nWhenever a JSX element gets rendered, every virtual DOM object gets updated.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React uses two virtual DOMs to render the user interface. One of them is used to store the current state of the objects and the other to store the previous state of the objects.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Whenever the virtual DOM gets updated, react compares the two virtual DOMs and gets to know about which virtual DOM objects were updated.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"After knowing which objects were updated, react renders only those objects inside the real DOM instead of rendering the complete real DOM.This way, with the use of virtual DOM, react solves the problem of inefficient updating\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Explain-React-state-and-props\",\n      children: \"Explain React state and props?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A React component can access dynamic information in two ways: props and state.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"React-State\",\n      children: \"React State\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Every component in react has a built-in state object, which contains all the property values that belong to that component.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In other words, the state object controls the behaviour of a component. Any change in the property values of the state object leads to re-rendering of the component.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.em, {\n        children: \"Note- State object is not available in functional components but, we can use React Hooks to add state to a functional component.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"How to declare a state object?\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Example:\\nclass Car extends React.Component{\\n constructor(props){\\n   super(props);\\n   this.state = {\\n     brand: \\\"BMW\\\",\\n     color: \\\"black\\\"\\n   }\\n }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"How to use and update the state object?\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"class Car extends React.Component {\\n constructor(props) {\\n   super(props);\\n   this.state = {\\n     brand: \\\"BMW\\\",\\n     color: \\\"Black\\\"\\n   };\\n }\\n\\n changeColor() {\\n   this.setState(prevState => {\\n     return { color: \\\"Red\\\" };\\n   });\\n }\\n\\n render() {\\n   return (\\n     <div>\\n       <button onClick={() => this.changeColor()}>Change Color</button>\\n       <p>{this.state.color}</p>\\n     </div>\\n   );\\n }\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"As one can see in the code above, we can use the state by calling this.state.propertyName and we can change the state object property using setState method.\"\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"React-Props\",\n      children: \"React Props\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Every react component, accepts a single object argument called props (which stands for “properties”).\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"These props can be passed to a component using HTML attributes.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Using props, we can pass data from one component to another.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"While rendering a component, we can pass the props as a HTML attribute:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"<Car brand=\\\"Mercedes\\\"/>\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The component receives the props:\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"In Class component:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"class Car extends React.Component {\\n constructor(props) {\\n   super(props);\\n   this.state = {\\n     brand: this.props.brand,\\n     color: \\\"Black\\\"\\n   };\\n }\\n}\\n\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"In Functional component:\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"function Car(props) {\\n  render() {\\n      return <h1>Name is {props.name}!</h1>;\\n   }\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Note- Props are read-only. They cannot be manipulated or changed inside a component\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Explain-React-Hooks\",\n      children: \"Explain React Hooks?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Hooks are functions that let us “hook into” React state and lifecycle features from a \", _jsx(_components.code, {\n        children: \"functional component.\"\n      }), \"\\nReact Hooks cannot be used in class components.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Why were Hooks introduced in React?\\nReact hooks were introduced in the 16.8 version of React.\\nPreviously, functional components were called stateless components. Only class components were used for state management and lifecycle methods.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The need to change a functional component to a class component, whenever state management or lifecycle methods were to be used, led to the development of Hooks.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Example of a hook:\"\n      })\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"useState hook:\"\n      }), \"\\nIn functional components, useState hook lets us define state for a component:\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"function Person(props) {\\n // We are declaring a state variable called name.\\n // setName is a function to update/change the value of name\\n let [name, setName] = useState('');\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"What-are-the-different-lifecycle-methods-in-React\",\n      children: \"What are the different lifecycle methods in React?\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Each component in react goes through three phases: \", _jsx(_components.code, {\n        children: \"Mounting\"\n      }), \", \", _jsx(_components.code, {\n        children: \"Updating\"\n      }), \", and \", _jsx(_components.code, {\n        children: \"Unmounting\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Mounting\"\n        }), \" :- Birth of your component\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Update\"\n        }), \" :- Growth of your component\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [_jsx(_components.strong, {\n          children: \"Unmount\"\n        }), \" :- Death of your component\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1003/ReactLifeCycle.png\",\n        alt: \"React Life Cycle Methods\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Common-React-Lifecycle-Methods\",\n      children: \"Common React Lifecycle Methods\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"constructor()\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is used only if you have a class-based Component and it serves the purpose of initializing the state of a Component. In case of functional Components, the useState() hook is used to do the same.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"render()\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is the method that is \", _jsx(_components.code, {\n        children: \"responsible for inserting a Component into the DOM\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The render() method is the most used lifecycle method. This is because render() is the only required method within a class component in React.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"It happens during the \", _jsx(_components.code, {\n        children: \"mounting\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"updating\"\n      }), \" of your component.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Below is an example of a simple render() in React.\\n\\nclass Hello extends Component{\\n   render(){\\n      return <div>Hello {this.props.name}</div>\\n   }\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"A render() can also return a null if there is nothing to render for that component.\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"componentDidMount()\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is invoked \", _jsx(_components.code, {\n        children: \"after a Component is inserted into the DOM for the first time\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When component has been mounted and ready, that’s when the next React lifecycle method componentDidMount() comes in play.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"componentDidMount() is called as soon as the component is mounted and ready. This is a good place to initiate API calls, if you need to load data from a remote endpoint.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.code, {\n        children: \"componentDidMount() allows the use of setState()\"\n      }), \".\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"componentDidUpdate()\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"This is the method invoked after \", _jsx(_components.code, {\n        children: \"re-rendering an updated Component\"\n      }), \". This method can give you the information about a Component’s previous state and previous props. This lifecycle method is invoked as soon as the updating happens. The most common use case for the componentDidUpdate() method is updating the DOM in response to prop or state changes.\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You can call setState() in this lifecycle, but keep in mind that you will need to wrap it in a condition to check for state or prop changes from previous state. Incorrect usage of setState() can lead to an infinite loop.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Take a look at the example below that shows a typical usage example of this lifecycle method.\\n\\ncomponentDidUpdate(prevProps) {\\n//Typical usage, don't forget to compare the props\\nif (this.props.userName !== prevProps.userName) {\\nthis.fetchData(this.props.userName);\\n}\\n}\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Notice in the above example that we are comparing the current props to the previous props. This is to check if there has been a change in props from what it currently is. In this case, there won’t be a need to make the API call if the props did not change.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"componentWillUnmount()\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"As the name suggests this lifecycle method is called just \", _jsx(_components.code, {\n        children: \"before the component is unmounted and destroyed\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"You cannot modify the component state in componentWillUnmount lifecycle.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"This is where you can perform any cleanups that need to be done such as invalidating timers, canceling network requests, removing event listeners, and so on.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"componentWillUnmount() {\\nwindow.removeEventListener('resize', this.resizeListener)\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"What-are-keys-in-React\",\n      children: \"What are keys in React?\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A key is a special string attribute that needs to be included when using lists of elements.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example of a list using key:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const ids = [1,2,3,4,5];\\nconst listElements = ids.map((id)=>{\\nreturn(\\n <li key={id.toString()}>\\n   {id}\\n </li>\\n )\\n})\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Importance of keys:-\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Keys help react identify which elements were added, changed or removed.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Keys should be given to array elements for providing a unique identity for each element.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Without keys, React does not understand the order or uniqueness of each element.\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"With keys, React has an idea of which particular element was deleted,edited, and added.\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"React-pure-component\",\n      children: \"React pure component\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A React component is considered pure if it renders the same output for the same state and props. For class components like this, React provides the PureComponent base class. Class components that extend the \", _jsx(_components.code, {\n        children: \"React.PureComponent\"\n      }), \" class are treated as \", _jsx(_components.code, {\n        children: \"pure components\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Pure components have some performance improvements and render optimizations since React implements the shouldComponentUpdate() method for them with a shallow comparison for props and state.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"Features of React Pure Components\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Prevents re-rendering of Component if props or state is the same\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Takes care of “shouldComponentUpdate” implicitly\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"State and Props are Shallow Compared\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"Pure Components are more performant in certain cases\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"React Components re-renders in the following scenarios:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"“setState” is called in Component\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"“props” values are updated\"\n      }), \"\\n\", _jsx(_components.li, {\n        children: \"this.forceUpdate() is called\"\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.code, {\n        children: \"In the case of Pure Components, the React components do not re-render blindly without considering the updated values of React “props” and “state”. If updated values are the same as previous values, render is not triggered.\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"Id":1003,"Title":"Core Concept You Need to Know About React","Author":"Soumyajit","Tags":"React Interview","Topic":"React","Abstract":"Learning some of the fundamental concepts of React.js and top questions asked in react interview.","HeaderImage":"/BL-1003/reactjs.png","isPublished":true}},"id":"core-concept-you-need-to-know-about-react","headings":[{"text":"Why use react.js","level":2,"id":"Why-use-react.js","uid":1001},{"text":"What is JSX?","level":2,"id":"What-is-JSX","uid":1002},{"text":"What is the virtual DOM? How does react use the virtual DOM to render the UI?","level":2,"id":"What-is-the-virtual-DOM-How-does-react-use-the-virtual-DOM-to-render-the-UI","uid":1003},{"text":"Explain React state and props?","level":2,"id":"Explain-React-state-and-props","uid":1004},{"text":"React State","level":3,"id":"React-State","uid":1005},{"text":"React Props","level":3,"id":"React-Props","uid":1006},{"text":"Explain React Hooks?","level":2,"id":"Explain-React-Hooks","uid":1007},{"text":"What are the different lifecycle methods in React?","level":2,"id":"What-are-the-different-lifecycle-methods-in-React","uid":1008},{"text":"Common React Lifecycle Methods","level":3,"id":"Common-React-Lifecycle-Methods","uid":1009},{"text":"What are keys in React?","level":2,"id":"What-are-keys-in-React","uid":1010},{"text":"React pure component","level":2,"id":"React-pure-component","uid":1011}],"topics":["Git","React","Javascript"]},"__N_SSG":true}