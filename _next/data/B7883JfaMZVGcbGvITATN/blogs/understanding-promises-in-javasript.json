{"pageProps":{"data":{"Id":1005,"Title":"Understanding Promises in Javasript","Author":"Soumyajit","Tags":"Javascript Interview","Topic":"Javascript","Abstract":"Learning about Promises in Javascript","HeaderImage":"/BL-1005/header.png","isPublished":true},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    code: \"code\",\n    pre: \"pre\",\n    ul: \"ul\",\n    li: \"li\",\n    strong: \"strong\",\n    img: \"img\",\n    h3: \"h3\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"What-is-a-Promise-in-JavaScript\",\n      children: \"What is a Promise in JavaScript\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"A Promise is a special JavaScript object. It produces a value after an asynchronous operation completes successfully, or an error if it does not complete successfully due to time out, network error, and so on.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Creating-a-JavaScript-Promise\",\n      children: \"Creating a JavaScript Promise\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"When the task completes, you either fulfill your promise or fail to do so.\\nPromise is a constructor function, so you need to use the \", _jsx(_components.code, {\n        children: \"new keyword\"\n      }), \" to create one. It takes a function, as its argument, with two parameters - \", _jsx(_components.code, {\n        children: \"resolve and reject\"\n      }), \". These are methods used to determine the outcome of the promise.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Creating a Promise\\n\\nconst myPromise = new Promise((resolve, reject) => {\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Promise-States\",\n      children: \"Promise States\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"A promise has three states: \", _jsx(_components.code, {\n        children: \"pending, fulfilled, and rejected.\"\n      }), \" The resolve and reject parameters given to the promise argument are used to do this. resolve is used when you want your promise to succeed, and reject is used when you want it to fail. These are methods that take an argument, as seen below.\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Pending: Initially when the executor function starts the execution.\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Fulfilled: When the promise is resolved.\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"Rejected: When the promise is rejected.\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1005/states.png\",\n        alt: \"Promise States\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const myPromise = new Promise((resolve, reject) => {\\n if(condition here) {\\n   resolve(\\\"Promise was fulfilled\\\");\\n } else {\\n   reject(\\\"Promise was rejected\\\");\\n }\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Handling-a-Promise\",\n      children: \"Handling a Promise\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1005/handling.png\",\n        alt: \"Promise Handling\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Handling-Promises-With-Then-Method\",\n      children: \"Handling Promises With Then Method\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Promises are most useful when you have a process that takes an unknown amount of time in your code (i.e. something asynchronous), often a server request. When you make a server request it takes some amount of time, and after it completes you usually want to do something with the response from the server. This can be achieved by using the then method. The then method is executed immediately after your promise is fulfilled with resolve.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"myPromise.then(result => {\\n\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Handling-a-Rejected-Promise-with-Catch-Method\",\n      children: \"Handling a Rejected Promise with Catch Method\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Catch is the method used when your promise has been rejected. It is executed immediately after a promise's reject method is called.\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"myPromise.catch(error => {\\n\\n});\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Async-Await\",\n      children: \"Async Await\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Async/await are special syntax to work with promises in a more comfortable fashion.\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"async makes a function return a Promise\"\n        })\n      }), \"\\n\", _jsx(_components.li, {\n        children: _jsx(_components.strong, {\n          children: \"await makes a function wait for a Promise\"\n        })\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Async\",\n      children: \"Async\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"Example\\nasync function myFunction() {\\n  return \\\"Hello\\\";\\n}\\n\\nIs the same as:\\nasync function myFunction() {\\n  return Promise.resolve(\\\"Hello\\\");\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"Await\",\n      children: \"Await\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"The keyword await makes JavaScript wait until that promise settles and returns its result.\\nThe \", _jsx(_components.code, {\n        children: \"await keyword\"\n      }), \" can only be used inside an \", _jsx(_components.code, {\n        children: \"async\"\n      }), \" function.\"]\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"async function f() {\\n\\n  let promise = new Promise((resolve, reject) => {\\n    setTimeout(() => resolve(\\\"done!\\\"), 1000)\\n  });\\n\\n  let result = await promise; // wait until the promise resolves (*)\\n\\n  alert(result); // \\\"done!\\\"\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"The function execution \\\"pauses\\\" at the line (*) and resumes when the promise settles, with result becoming its result.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Implement-Promise\",\n      children: \"Implement Promise\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const pr1 = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    resolve(\\\"hello\\\");\\n  }, 4000);\\n});\\n\\nconst pr2 = new Promise((resolve, reject) => {\\n  setTimeout(() => {\\n    resolve(\\\"world\\\");\\n  }, 0);\\n});\\n\\nconst fun = async () => {\\n  try {\\n    const res = await Promise.all([pr1, pr2]);\\n    console.log(res);\\n  } catch (err) {\\n    console.log(err);\\n  }\\n};\\n\\nfun();\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"References:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(\"a\", {\n          href: \"https://www.freecodecamp.org/news/javascript-promise-tutorial-how-to-resolve-or-reject-promises-in-js/\",\n          target: \"_blank\",\n          children: \"JavaScript Promise Tutorial\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(\"a\", {\n          href: \"https://www.w3schools.com/js/js_async.asp\",\n          target: \"_blank\",\n          children: \"Async/Await\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"Id":1005,"Title":"Understanding Promises in Javasript","Author":"Soumyajit","Tags":"Javascript Interview","Topic":"Javascript","Abstract":"Learning about Promises in Javascript","HeaderImage":"/BL-1005/header.png","isPublished":true}},"id":"understanding-promises-in-javasript","headings":[{"text":"What is a Promise in JavaScript","level":2,"id":"What-is-a-Promise-in-JavaScript","uid":1001},{"text":"Creating a JavaScript Promise","level":2,"id":"Creating-a-JavaScript-Promise","uid":1002},{"text":"Promise States","level":2,"id":"Promise-States","uid":1003},{"text":"Handling a Promise","level":2,"id":"Handling-a-Promise","uid":1004},{"text":"Handling Promises With Then Method","level":3,"id":"Handling-Promises-With-Then-Method","uid":1005},{"text":"Handling a Rejected Promise with Catch Method","level":3,"id":"Handling-a-Rejected-Promise-with-Catch-Method","uid":1006},{"text":"Async Await","level":2,"id":"Async-Await","uid":1007},{"text":"Async","level":3,"id":"Async","uid":1008},{"text":"Await","level":3,"id":"Await","uid":1009},{"text":"Implement Promise","level":2,"id":"Implement-Promise","uid":1010}],"topics":["Git","React","Javascript"]},"__N_SSG":true}