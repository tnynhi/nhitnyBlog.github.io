{"pageProps":{"data":{"Id":1002,"Title":"Client Vs Server Side Rendering","Author":"Soumyajit","Tags":"React Next","Topic":"React","Abstract":"Difference between different types of rendering techniques and advantage of Next.js over React.js.","HeaderImage":"/BL-1002/next-react.jpg","isPublished":true},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    ul: \"ul\",\n    li: \"li\",\n    code: \"code\",\n    h3: \"h3\",\n    pre: \"pre\",\n    strong: \"strong\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"Client-Side-Rendering\",\n      children: \"Client Side Rendering\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1002/csr.png\",\n        alt: \"Client Side Rendering\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"When we talk about client-side rendering,it’s about rendering content in the browser using JavaScript.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"So instead of getting all the content from the HTML document itself, a simple HTML document with a JavaScript file in initial loading itself is received, which renders the rest of the site using the browser.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"With client-side rendering, the initial page load is naturally a bit slow. However, after that, every subsequent page load is very fast. In this approach, communication with server happens only for getting the run-time data. Moreover, there is no need to reload the entire UI after every call to the server. The client-side framework manages to update UI with changed data by re-rendering only that particular DOM element.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Server-Side-Rendering\",\n      children: \"Server Side Rendering\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1002/ssr.png\",\n        alt: \"Server Side Rendering\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"In server-side rendering when a user makes a request to a webpage, the server prepares an HTML page by fetching user-specific data and sends it to the user’s machine over the internet. Webpages are generated on your server for every request. This entire process of fetching data from the database, creating an HTML page and serve it to user is known as SSR.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Static-Site-Generation\",\n      children: \"Static Site Generation\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"At build time, your app will fetch all the data required and compile it down to static webpages. After a production build is created, every request is going to reuse that statically generated HTML file. This provides the best performance and can easily be cached on a CDN.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Problems-with-React.js\",\n      children: \"Problems with React.js\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"React uses Client Side Rendering. With React, nothing gets displayed until all of your JavaScript loads. Your HTML is nearly empty and React injects your content in your HTML with JavaScript.\\r\\nThis leads multiple problems:-\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsxs(_components.p, {\n          children: [\"When the browser is loading the JavaScript, the screen is blank because \", _jsx(_components.code, {\n            children: \"<div id=\\\"root\\\"></div>\"\n          }), \" does not show anything. Depending on the size of your JavaScript bundle, this could lead to your visitors staring at a white screen for a couple of seconds.\"]\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Most SEO crawlers do not have JavaScript enabled. DuckDuckGo, Google, Bing and any other search engine would not actually know what is on your website since it requires JavaScript to display the content. You will not be ranked at all on Search Engines.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Methods-for-Prerendering-using-Next.js\",\n      children: \"Methods for Prerendering using Next.js\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [\"Next.js offers \", _jsx(_components.code, {\n        children: \"(Server Side Rendering)SSR\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"(Static Site Generation)SSG\"\n      }), \" using \", _jsx(_components.code, {\n        children: \"getStaticProps\"\n      }), \" and \", _jsx(_components.code, {\n        children: \"getServerSideProps\"\n      }), \".\"]\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"getStaticProps\",\n      children: \"getStaticProps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"getStaticProps is a server-side function that will only be called at build time. The build will then use the response from getStaticProps to generate a static webpage.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since stale data is a problem with static generated pages, there is an option you can set to revalidate your static page and rebuild it if data changes. revalidate: 60 will check your data every 60 seconds and rebuild the page if needed.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example Use:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// This function gets called at build time on server-side.\\r\\nexport async function getStaticProps() {\\r\\nconst res = await fetch('https://.../data');\\r\\nconst data = await res.json();\\r\\n\\r\\n// By returning { props: data }, the Dashboard component\\r\\n// will receive `data` as a prop at build time\\r\\nreturn {\\r\\nprops: {\\r\\ndata\\r\\n},\\r\\n// Check if data changes every 60 seconds.\\r\\n// Rebuild page if different\\r\\nrevalidate: 60\\r\\n};\\r\\n}\\r\\n\\r\\n// data will be populated at build time by getStaticProps()\\r\\nexport default function Dashboard({ data }) {\\r\\nreturn <div>{data}</div>;\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h3, {\n      id: \"getServerSideProps\",\n      children: \"getServerSideProps\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"getServerSideProps is similar to getStaticProps but is called every time the page loads instead of at build time. This ensures that all of your initial data is up to date on every load.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Since this is called on every load, you do not need to revalidate like getStaticProps. This also leads to a slower load time since you are no longer serving a static file, but have to rebuild on every load.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example Use:\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"// This function gets called at build time on server-side.\\r\\nexport async function getServerSideProps() {\\r\\nconst res = await fetch('https://.../data');\\r\\nconst data = await res.json();\\r\\n\\r\\n// By returning { props: data }, the Dashboard component\\r\\n// will receive `data` as a prop at build time\\r\\nreturn {\\r\\nprops: {\\r\\ndata\\r\\n}\\r\\n};\\r\\n}\\r\\n\\r\\n// data will be populated at build time by getServerSideProps()\\r\\nexport default function Dashboard({ data }) {\\r\\nreturn <div>{data}</div>;\\r\\n}\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Benefits-of-using-Next.js\",\n      children: \"Benefits of using Next.js\"\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsx(_components.li, {\n        children: \"Search engines can crawl the site for better SEO.\"\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"The initial page load is faster.\\r\\n\", _jsx(_components.img, {\n          src: \"/BL-1002/nextjs-pros-and-cons.png\",\n          alt: \"nextjs pros and cons\"\n        })]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"References:\"\n      })\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(\"a\", {\n          href: \"https://nextjs.org/docs/getting-started\",\n          target: \"_blank\",\n          children: \"Next.js\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"Id":1002,"Title":"Client Vs Server Side Rendering","Author":"Soumyajit","Tags":"React Next","Topic":"React","Abstract":"Difference between different types of rendering techniques and advantage of Next.js over React.js.","HeaderImage":"/BL-1002/next-react.jpg","isPublished":true}},"id":"client-vs-server-side-rendering","headings":[{"text":"Client Side Rendering","level":2,"id":"Client-Side-Rendering","uid":1001},{"text":"Server Side Rendering","level":2,"id":"Server-Side-Rendering","uid":1002},{"text":"Static Site Generation","level":2,"id":"Static-Site-Generation","uid":1003},{"text":"Problems with React.js","level":2,"id":"Problems-with-React.js","uid":1004},{"text":"Methods for Prerendering using Next.js","level":2,"id":"Methods-for-Prerendering-using-Next.js","uid":1005},{"text":"getStaticProps","level":3,"id":"getStaticProps","uid":1006},{"text":"getServerSideProps","level":3,"id":"getServerSideProps","uid":1007},{"text":"Benefits of using Next.js","level":2,"id":"Benefits-of-using-Next.js","uid":1008}],"topics":["Git","React","Javascript"]},"__N_SSG":true}