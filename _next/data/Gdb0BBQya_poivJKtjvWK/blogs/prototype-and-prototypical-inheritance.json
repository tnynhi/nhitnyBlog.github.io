{"pageProps":{"data":{"Id":1009,"Title":"Prototype and Prototypical Inheritance","Author":"Soumyajit","Tags":"Javascript Interview","Topic":"Javascript","Abstract":"Understanding And Using Prototype and Prototypical Inheritance in JavaScript","HeaderImage":"/BL-1009/header.jpg","isPublished":true},"content":{"compiledSource":"/*@jsxRuntime automatic @jsxImportSource react*/\nconst {Fragment: _Fragment, jsx: _jsx, jsxs: _jsxs} = arguments[0];\nconst {useMDXComponents: _provideComponents} = arguments[0];\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h2: \"h2\",\n    p: \"p\",\n    img: \"img\",\n    strong: \"strong\",\n    ul: \"ul\",\n    li: \"li\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return _jsxs(_Fragment, {\n    children: [_jsx(_components.h2, {\n      id: \"Prototype\",\n      children: \"Prototype\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1009/object-prototype-empty.svg\",\n        alt: \"Prototype\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.strong, {\n        children: \"The prototype is an object that is associated with every functions and objects by default in JavaScript.\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Whenever we create a function , object or array javacript by default attaches a prototype object to it which contains some additional methods inside it.\"\n    }), \"\\n\", _jsxs(_components.p, {\n      children: [_jsx(_components.img, {\n        src: \"/BL-1009/proto.png\",\n        alt: \"Prototype\"\n      }), \"\\r\\nAll JavaScript objects inherit properties and methods from a prototype:\"]\n    }), \"\\n\", _jsxs(_components.ul, {\n      children: [\"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Date objects inherit from Date.prototype.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Array objects inherit from Array.prototype.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"Player objects inherit from Player.prototype.\"\n        }), \"\\n\"]\n      }), \"\\n\", _jsxs(_components.li, {\n        children: [\"\\n\", _jsx(_components.p, {\n          children: \"The Object.prototype is on top of the prototype inheritance chain. Date objects, Array objects, and Player objects all inherit from Object.prototype.\"\n        }), \"\\n\"]\n      }), \"\\n\"]\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"The-Prototype-Chain\",\n      children: \"The Prototype Chain\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Prototypal inheritance uses the concept of prototype chaining.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Every object created contains [[Prototype]], which points either to another object or null.\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Example:-\\r\\nAn object C with a [[Prototype]] property that points to object B. Object Bâ€™s [[Prototype]] property points to prototype object A. This continues onward, forming a kind of chain called the prototype chain.\"\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Prototypal-Inheritance\",\n      children: \"Prototypal Inheritance\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"let animal = {\\r\\n  eats: true\\r\\n   walk() {\\r\\n    console.log(\\\"Animal walk\\\");\\r\\n  }\\r\\n};\\r\\n\\r\\nlet rabbit = {\\r\\n  jumps: true\\r\\n  __proto__ = animal;\\r\\n};\\r\\n\\r\\n\\r\\n// we can find both properties in rabbit now:\\r\\nconsole.log(rabbit.eats ); // true\\r\\n\\r\\nrabbit.walk(); // Animal walk\\r\\n\\n\"\n      })\n    }), \"\\n\", _jsx(_components.p, {\n      children: _jsx(_components.img, {\n        src: \"/BL-1009/rabbit-animal-object.svg\",\n        alt: \"Prototype\"\n      })\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const obj = {\\r\\n  firstName: \\\"sds\\\",\\r\\n  lastName: \\\"bh\\\",\\r\\n  getFullName: function () {\\r\\n    return this.firstName + \\\" \\\" + this.lastName;\\r\\n  }\\r\\n};\\r\\n\\r\\nconst obj2 = {\\r\\n  firstName: \\\"ab\\\",\\r\\n  __proto__: obj\\r\\n};\\r\\n\\r\\nconsole.log(obj2.getFullName()); //ab bh\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Creating-own-prototype\",\n      children: \"Creating own prototype\"\n    }), \"\\n\", _jsx(_components.p, {\n      children: \"Creating Ployfill for bind method\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const obj = {\\r\\n  firstName: \\\"sds\\\",\\r\\n  lastName: \\\"bh\\\"\\r\\n};\\r\\n\\r\\nfunction getFullName(state) {\\r\\n  return this.firstName + \\\" \\\" + this.lastName + \\\" \\\" + state;\\r\\n}\\r\\n\\r\\nconst fName = getFullName.bind(obj, \\\"rnc\\\");\\r\\nconsole.log(fName()); //sds bh rnc\\r\\n\\r\\nFunction.prototype.myBind = function (...args) {\\r\\n  const func = this;\\r\\n  const params = args.slice(1);\\r\\n  return function () {\\r\\n    return func.apply(args[0], params);\\r\\n  };\\r\\n};\\r\\n\\r\\nconst fName2 = getFullName.myBind(obj, \\\"bsh\\\");\\r\\nconsole.log(fName2()); //sds bh bsh\\n\"\n      })\n    }), \"\\n\", _jsx(_components.h2, {\n      id: \"Creating-Ployfill-for-Call-Apply-and-Bind-method\",\n      children: \"Creating Ployfill for Call, Apply and Bind method\"\n    }), \"\\n\", _jsx(_components.pre, {\n      children: _jsx(_components.code, {\n        children: \"const obj = {\\r\\n  firstName: \\\"sds\\\",\\r\\n  lastName: \\\"bh\\\"\\r\\n};\\r\\n\\r\\nfunction getFullName(state) {\\r\\n  return this.firstName + \\\" \\\" + this.lastName + \\\" \\\" + state;\\r\\n}\\r\\n\\r\\nFunction.prototype.myBind = function (obj, ...args) {\\r\\n  obj.func = this;\\r\\n  return () => {\\r\\n    return obj.func(...args);\\r\\n  };\\r\\n};\\r\\n\\r\\nFunction.prototype.myCall = function (obj, ...args) {\\r\\n  obj.func = this;\\r\\n  return obj.func(...args);\\r\\n};\\r\\n\\r\\nFunction.prototype.myApply = function (obj, args) {\\r\\n  obj.func = this;\\r\\n  return obj.func(...args);\\r\\n};\\r\\n\\r\\nconst fName2 = getFullName.myBind(obj, \\\"bsh\\\");\\r\\nconsole.log(fName2()); //sds bh bsh\\r\\n\\r\\nconsole.log(getFullName.myCall(obj, \\\"kkr\\\"));  //sds bh kkr\\r\\n\\r\\nconsole.log(getFullName.myApply(obj, [\\\"kkr\\\"]));  //sds bh kkr\\n\"\n      })\n    })]\n  });\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? _jsx(MDXLayout, Object.assign({}, props, {\n    children: _jsx(_createMdxContent, props)\n  })) : _createMdxContent(props);\n}\nreturn {\n  default: MDXContent\n};\n","frontmatter":{},"scope":{"Id":1009,"Title":"Prototype and Prototypical Inheritance","Author":"Soumyajit","Tags":"Javascript Interview","Topic":"Javascript","Abstract":"Understanding And Using Prototype and Prototypical Inheritance in JavaScript","HeaderImage":"/BL-1009/header.jpg","isPublished":true}},"id":"prototype-and-prototypical-inheritance","headings":[{"text":"Prototype","level":2,"id":"Prototype","uid":1001},{"text":"The Prototype Chain","level":2,"id":"The-Prototype-Chain","uid":1002},{"text":"Prototypal Inheritance","level":2,"id":"Prototypal-Inheritance","uid":1003},{"text":"Creating own prototype","level":2,"id":"Creating-own-prototype","uid":1004},{"text":"Creating Ployfill for Call, Apply and Bind method","level":2,"id":"Creating-Ployfill-for-Call-Apply-and-Bind-method","uid":1005}],"topics":["Git","React","Javascript"]},"__N_SSG":true}